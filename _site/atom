<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Daniel Tomlinson</title>
  <link href="http://danie.lt/"/>
  <link type="application/atom+xml" rel="self" href="http://danie.lt/atom"/>
  <updated>2013-10-06T11:44:22+01:00</updated>
  <id>http://danie.lt/</id>
  <author>
    <name>Daniel Tomlinson</name>
    <email>DanielTomlinson@me.com</email>
  </author>

  
  <entry>
    <id>http://danie.lt/articles/projects/projecthermes/2013/08/13/what-is-projecthermes</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/articles/projects/projecthermes/2013/08/13/what-is-projecthermes.html"/>
    <title>What is ProjectHermes?</title>
    <published>2013-08-13T11:13:00+01:00</published>
    <updated>2013-08-13T11:13:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;img src='/assets/yrs.png' style='display:none;' /&gt;
&lt;p&gt;ProjectHermes began as my project for &lt;a href='https://youngrewiredstate.org'&gt;Young Rewired State 2013&lt;/a&gt;, and then (after a mad rebuilding couple of hours after a computer died), went on to win the &amp;#8220;Should Exist&amp;#8221; category.&lt;/p&gt;

&lt;h1 id='projecthermes'&gt;ProjectHermes&lt;/h1&gt;

&lt;p&gt;ProjectHermes is a tool for finding those who wish to hurt others through the internet, that detects trolls, racists, misogynists and bullies through natural language analysis.&lt;/p&gt;

&lt;h1 id='why_should_it_exist'&gt;Why Should It exist?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To raise awareness of and change the way people think about important topics such as bullying, misogyny and racism.&lt;/li&gt;

&lt;li&gt;Potentially saving lives by stopping bullying - as it will be easier to find those bullying online.&lt;/li&gt;

&lt;li&gt;The vast amount of data that goes through Twitter can be easy to miss, Hermes highlights the key points that often go unnoticed by everyone but its target - who can often feel unable to speak out or raise awareness.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='currently'&gt;Currently&lt;/h1&gt;

&lt;p&gt;At the moment, Hermes is limited, after originally losing its source, I have rebuilt the ability to stream, detect directly targeted bullying, and a simple front-end.&lt;/p&gt;

&lt;p&gt;I am building in more functionality in the natural language areas at the moment, and then will be building a front-end.&lt;/p&gt;

&lt;h1 id='future'&gt;Future&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To be open-sourced, as this is a project to change the world, and we can only do this by working together for a better future. It also has an easily extensible structure, to allow for people to use it for their own projects and ideas, as a tool for change.&lt;/li&gt;

&lt;li&gt;I also intend on increasing reach and functionality, to add more responsibility to what we say online by finding related social profiles for the content, creating a safe future without fear of mass hate, for us and our children, hopefully saving even a small percentage of the 5000+ people that commit suicide each year due to bullying.&lt;/li&gt;

&lt;li&gt;I&amp;#8217;d also like to create a simple platform to get people to find help for their issues, such as links and contact details for local authorities and other help groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='problems'&gt;Problems&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Currently, I only have access to 0.01% of tweets using the /sample endpoint on the twitter api, to be truly efficient, I need access to the firehose, this can only be accessed through a twitter partner like datasift, and this is likely to cost a lot of money, I need to raise funding for this, or get a partnership with such companies.&lt;/li&gt;

&lt;li&gt;I also need to rent some pretty powerful servers from somewhere like Amazon Web Services, to cope with such vast amounts of data.&lt;/li&gt;

&lt;li&gt;Awareness, I also need to get the platform out to people, to show them what is really happening on the internet, so that we can begin to change the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='closing'&gt;Closing&lt;/h1&gt;

&lt;p&gt;ProjectHermes can hopefully do some real good in the world, but only with the right support. We need to &lt;em&gt;act&lt;/em&gt; to &lt;em&gt;change&lt;/em&gt;, for a better future, for ourselves, our children, and our children&amp;#8217;s children.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/ios/development/objective-c/2013/08/03/how-objective-c-messaging-works</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/ios/development/objective-c/2013/08/03/how-objective-c-messaging-works.html"/>
    <title>How Objective-C messaging works</title>
    <published>2013-08-03T23:47:00+01:00</published>
    <updated>2013-08-03T23:47:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;p&gt;I have always been interested in how the low level of programming languages work, and lots a fair few people on IRC and Twitter have asked how messaging in objective-c works, so I&amp;#8217;ve decided to blog about it!&lt;/p&gt;

&lt;p&gt;To understand how messaging in objective-c works, we first need to understand how its objects are represented in memory.&lt;/p&gt;

&lt;p&gt;To understand what an object really is, we need to go to the lowest-level of the object - its representation in memory, and to understand the Objective-C memory model, you must first understand that of C.&lt;/p&gt;

&lt;p&gt;So, how is a C object represented in memory?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int i;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would possibly look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i = 0xDEADBEEF

[DE] [AD] [BE] [EF]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in C on a 32-bit machine, however, this is Big-Endian, on an intel mac, it would look like this (as intel macs are little-endian):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[EF] [BE] [AD] [DE]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, in this post, we&amp;#8217;ll use big-endian, as it is easier to read.&lt;/p&gt;

&lt;p&gt;The C Struc for a single int, looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _IntContainer {
  int i;
} IntContainer;

InctContainer ic;

ic.i = 0xDEADBEEF;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this is important, as in terms of memory layout, a struct with a single int, is identical to int, and therefore you can cast between IntContainer and an int for a value without and precision lost. In cocoa, a CFType also has an identical memory layout as NSObject 0 this is how it provides Toll-Free bridging.&lt;/p&gt;

&lt;p&gt;But how would something with more than one field look? Well, its just contiguous objects in memory, with some extra things for alignment and padding. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _NSPoint {
  CGFloat x;
  CGFloat y;
}

NSPoint p;
p.x = 1.0;
p.y = 2.0;


//Memory
//[3f][80][00][00] [40][00][00][00]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pointer (class *), point to another location of memory, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int* pointer;
*pointer = 0xreadbook;

//Memory
pointer:05010203  0x05010203:readbook&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The * &lt;em&gt;dereferences&lt;/em&gt; the pointer, and sets the value at the pointed to address, sort of like forwading the message.&lt;/p&gt;

&lt;h3 id='moving_on_to_objectivec'&gt;Moving on to Objective-C&lt;/h3&gt;

&lt;p&gt;So, now we&amp;#8217;re ready to look at the memory structure of objective-c, it looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct NSObject {
  Class isa;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(declaring an @interface is a fancy way of declaring a struct of the same name, and tells the compiler its an objective c class).&lt;/p&gt;

&lt;p&gt;isa is just something that points to a class. But what is class? Well, it&amp;#8217;s something that is defined in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;objc/objc.h&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as a typedef for objc_class*, so NSObject is a single pointer to a class definition.&lt;/p&gt;

&lt;p&gt;objc_class, looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct objc_class {
  Class isa;
  Class super_class;
  const char *name;
  long version;
  long info;
  long instance_size;
  struct objc_ivar_list *ivars;
  struct objc_method_lists **methodLists;
  struct objc_cache *cache;
  struct objc_protocol_list *protocols;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;objc_class has an isa of Class type, and it is the same as that of NSObject, so an objc_class is an object, because its memory model is the same, and things like message sending that work on instance objects, also work on objects, reducing the amount of special case code needed to distinguish between the two. It&amp;#8217;s &lt;em&gt;isa&lt;/em&gt; field however, points to a &lt;em&gt;metaclass&lt;/em&gt; object, which is just another objc_class struct. Every class definition therefore has a class and metaclass definition, this is because a class objects list of methods are for &lt;em&gt;instances&lt;/em&gt; of the class, and the metaclass objects list of methods are for &lt;em&gt;class&lt;/em&gt; methods.&lt;/p&gt;

&lt;p&gt;A metaclass&amp;#8217; isa pointer however, simply terminates the cycle by pointing to itself (We don&amp;#8217;t have metaclass methods yet!).&lt;/p&gt;

&lt;h3 id='messaging'&gt;Messaging&lt;/h3&gt;

&lt;p&gt;When we start learning objective-c, we are (mostly) taught that our magical brackety code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self doSomethingTo:var1];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is transformed into something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objc_msgSend(self, @selector(doSomethingTo:), var1);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and expected to just accept that it works, until we begin to advance, and start understanding what the runtime is doing to our code.&lt;/p&gt;

&lt;p&gt;The objective c runtime is written mainly in C and ASM to add all the amazing object orientated capabilities to C, creating Objecitve-C, this means it handles classes, method dispatch, method forwarding etc, and all the support structures that make it possible.&lt;/p&gt;

&lt;p&gt;So, here is some basic runtime terminology and more structs!&lt;/p&gt;

&lt;p&gt;A selector in Objective-C is a struct that identifies an Objective-C method you want an object to perform, and defined:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct objc_selector *SEL&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and used like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SEL select = @selector(doSomething)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, what is a message? An Objective-C message is everything between the two brackets [], and consists of the target, the method and any arguments. An Objective-C method, whilst similar to methods in C, is different, the fact that you are sending a message to an object, does not mean that it&amp;#8217;ll perform it, the object could dynamically decide based on runtime variables such as the sender, to perform a different method, or forward to a different object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[target thisIsTheMethod:arg1];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its decleration would be converted into something like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void -[target thisIsTheMethod:](id self, SEL _cmd, NSString* aString)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing different to your objective-c code is that it adds two extra arguments - self and _cmd, and some characters that are usually dissalowed in c ([]-), and if you get hold of a function pointer - you can actually call it in your code (although it isn&amp;#8217;t recommended).&lt;/p&gt;

&lt;p&gt;It would then be called like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objc_msgSend(target, @selector(thisIsTheMethod:), @” (YOLO)”);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, what happens when you use the &lt;span&gt;&amp;#8230;&lt;/span&gt; syntax to send a message to an object? The compiler actually transforms that into a call to a function named objc_msgSend() that’s part of the Objective-C runtime. objc_msgSend() takes at least two arguments: the object to send the message to (receiver in Objective-C lingo), and something called a selector, which is simply jargon for &amp;#8221;“&amp;#8221;a method name&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A selector is simply a C string, well, not quite, it has the same memory structure - NUL-terminated char * pointer - however the objective-c compiler ensures there is only one instance of the selector in the entire address space.&lt;/p&gt;

&lt;h3 id='building_objc_msgsend'&gt;Building objc_msgSend&lt;/h3&gt;

&lt;p&gt;You may be interested in seeing how an implementation of objc_msgSend would look, so here goes. In C, the function would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id objc_msgSend(id receiver, SEL name, arguments...) {
  IMP function = class_getMethodImplementation(receiver-&amp;gt;isa, name);
  return function(arguments);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although, due to the millions of times a second that this can potentially be called, it would be implemented in meticulously tuned ASM, because it needs to be incredibly fast.&lt;/p&gt;

&lt;p&gt;The method class_getMethodImplementation() that, when given a class object and a selector, returns the IMP, a C function implementation for that method. It does this by looking up the class’s method list and returns the IMP that matches the selector. Now that you have an IMP, (the IMP is a C Function pointer), you can call it just like you would any other C function. So, all objc_msgSend() does is grab the receiver’s class object via the isa field, finds the IMP for the selector, and thats it. We have message sending.&lt;/p&gt;

&lt;p&gt;If you want to read more about objc_msgSend, I&amp;#8217;d recommend looking &lt;a href='http://www.mikeash.com/pyblog/friday-qa-2012-11-16-lets-build-objc_msgsend.html'&gt;here&lt;/a&gt; &lt;a href='http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html'&gt;and here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post, if you did, please leave a comment down below, or share it on FaceBook/Twitter/HackerNews, it&amp;#8217;s much appreciated :)&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/ios/development/objective-c/2013/07/14/introduction-to-objective-c-and-ios-dev</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/ios/development/objective-c/2013/07/14/introduction-to-objective-c-and-ios-dev.html"/>
    <title>Introduction to Objective-C and iOS Dev</title>
    <published>2013-07-14T11:33:00+01:00</published>
    <updated>2013-07-14T11:33:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;p&gt;Objective-C is a reflective, compiled, Object-Oriented programming language that adds Smalltalk-Style messaging to C. It also tries to do as much as it can dynamically at runtime, rather than at compile time, this allows it to be used in many scenarios - such as its most common use - in applications for Mac OS X and iOS.&lt;/p&gt;

&lt;p&gt;To develop for iOS or Mac OS X, you need to have Xcode installed, this can be acquired from the Mac App Store at no cost to yourself, &lt;a href='https://itunes.apple.com/gb/app/xcode/id497799835?mt=12'&gt;Xcode (App Store)&lt;/a&gt;. To debug on a device, or to publish an application on the app store, you also need an iOS developer license.&lt;/p&gt;

&lt;p&gt;A standard convention in objective-c is camelCasing of method and variable names and CapsCasing of class names, as opposed to underscore_formatting, adopting this in your code keeps things consistent and readable.&lt;/p&gt;

&lt;h4 id='methods'&gt;Methods&lt;/h4&gt;

&lt;p&gt;One of the first things you will want to do is call methods, in objective-c, the basic syntax for this is:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object&lt;/span&gt; &lt;span class='n'&gt;method&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object&lt;/span&gt; &lt;span class='n'&gt;methodWithInput&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;input&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Methods can return objects:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='n'&gt;output&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object&lt;/span&gt; &lt;span class='n'&gt;methodWithOutput&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='n'&gt;output&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object&lt;/span&gt; &lt;span class='n'&gt;methodWithInputAndOutput&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;input&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also call methods on classes for example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='kt'&gt;id&lt;/span&gt; &lt;span class='n'&gt;anObject&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSURL&lt;/span&gt; &lt;span class='n'&gt;urlWithString&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://iosdev.danie.lt/articles/welcome&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Objective-C, the &lt;em&gt;id&lt;/em&gt; type means that the &lt;em&gt;anObject&lt;/em&gt; variable can refer to any type of object, and its class, methods and properties are not known at compile time.&lt;/p&gt;

&lt;p&gt;In that example, it&amp;#8217;s clear that the return type will be an &lt;em&gt;NSURL&lt;/em&gt;, so we can change it to:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='n'&gt;NSURL&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;myURL&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSURL&lt;/span&gt; &lt;span class='n'&gt;urlWithString&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://iosdev.danie.lt/articles/welcome&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Methods can also accept multiple inputs, for example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='n'&gt;Person&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;aPerson&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;Person&lt;/span&gt; &lt;span class='n'&gt;personWithFirstName&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;firstName&lt;/span&gt; &lt;span class='n'&gt;surname&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;surname&lt;/span&gt; &lt;span class='n'&gt;age&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;age&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id='variables_and_pointers'&gt;Variables and Pointers&lt;/h4&gt;

&lt;p&gt;Nearly all variables in objective-c are objects (other than primitive types such as &lt;em&gt;int&lt;/em&gt;, &lt;em&gt;float&lt;/em&gt; and &lt;em&gt;double&lt;/em&gt;), more correctly, they are &lt;em&gt;pointers&lt;/em&gt; to objects, the * in an objects deceleration is what specifies a pointer type, &lt;em&gt;id&lt;/em&gt; is predefined as a pointer, hence its omission, for example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='kt'&gt;id&lt;/span&gt; &lt;span class='n'&gt;myVariable&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;anArray&lt;/span&gt; &lt;span class='n'&gt;lastObject&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;42&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='n'&gt;NSNumber&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;aNumber&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSNumber&lt;/span&gt; &lt;span class='n'&gt;numberWithInt&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id='declaring_methods'&gt;Declaring methods&lt;/h4&gt;

&lt;p&gt;Public methods, are declared in a classes header (classname.h) file, and implemented in the classes implementation (classname.m), although private methods can be written straight into the implementation file.&lt;/p&gt;

&lt;p&gt;In Objective-C, class methods are declared in the header like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='c1'&gt;// The + means class method&lt;/span&gt;
&lt;span class='k'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSNumber&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;numberWithInt:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aInt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and implemented in the implementation file like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='k'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSNumber&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;numberWithInt:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aInt&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;NSNumber&lt;/span&gt; &lt;span class='n'&gt;alloc&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='n'&gt;initWithInt&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;aInt&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and are often used for convenience initialisers, for example, NSURL (The cocoa class for URLs), has:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='k'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSURL&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nf'&gt;URLWithString:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;stringURL&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to simplify the allocation and initialisation of NSURLs.&lt;/p&gt;

&lt;p&gt;Below you can see three method declarations&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='c1'&gt;// - means that it is an instance method&lt;/span&gt;
&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomething&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomethingWithAString:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aString&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomethingWithAString:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aString&lt;/span&gt; &lt;span class='nf'&gt;andInteger:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aInt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These would be implemented like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomething&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;NSLog&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomethingWithAString:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aString&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;NSLog&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Logging a string! %@&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aString&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nf'&gt;doSomethingWithAString:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aString&lt;/span&gt; &lt;span class='nf'&gt;andInteger:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;aInt&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;NSLog&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Logging a string: %@ and Integer: %d&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aString&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aInt&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id='shorthand_nsstring_nsdictionary_nsarray_and_nsnumber'&gt;Shorthand NSString, NSDictionary, NSArray and NSNumber.&lt;/h4&gt;

&lt;p&gt;In objective-c, there are shorthand ways to declare strings, dictionaries, arrays and numbers, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;myString&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='n'&gt;NSArray&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;myArray&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='err'&gt;@&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;object2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;object3&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='n'&gt;NSDictionary&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;myDict&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='err'&gt;@&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;anObject&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;anotherKey&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;anotherObjectOrValue&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='n'&gt;NSNumber&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;@42&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;These are especially useful when used in method calls:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='kt'&gt;id&lt;/span&gt; &lt;span class='n'&gt;anObject&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;object&lt;/span&gt; &lt;span class='n'&gt;objectWithArray&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='err'&gt;@&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id='loggingdebugging'&gt;Logging/Debugging&lt;/h4&gt;

&lt;p&gt;You can also log messages to the console in Xcode, this is extremely useful for debugging, and its NSLog() function is almost identical to the printf() function in C, but has &lt;strong&gt;%@&lt;/strong&gt; for logging objects.&lt;/p&gt;

&lt;p&gt;When you log an object to the console, it calls the &lt;strong&gt;description&lt;/strong&gt; method that returns the string to log.&lt;/p&gt;

&lt;p&gt;It is called like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='n'&gt;NSLog&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;The value of a string is: %@, the value of a float is: %f, the value of an int is: %d and the current date and time is: %@&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aString&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aFloat&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;aInt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSDate&lt;/span&gt; &lt;span class='n'&gt;date&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id='next_step'&gt;Next step&lt;/h4&gt;

&lt;p&gt;I&amp;#8217;d recommend trying out &lt;a href='http://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/RM_YourFirstApp_iOS/Articles/01_CreatingProject.html'&gt;First iOS App (Apple Developer Docs)&lt;/a&gt; to get a good basis for how Xcode and how the above things work in practice.&lt;/p&gt;

&lt;p&gt;And looking &lt;a href='http://cocoadevcentral.com/d/learn_objectivec/'&gt;here&lt;/a&gt; for more refences.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/products/e-readers/nook/books/2013/06/16/one-month-with-the-nook-simple-touch</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/products/e-readers/nook/books/2013/06/16/one-month-with-the-nook-simple-touch.html"/>
    <title>One Month with the Nook Simple Touch</title>
    <published>2013-06-16T16:50:00+01:00</published>
    <updated>2013-06-16T16:50:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;p&gt;A short while ago, around a month or so, Barnes and Noble lowered the price of the &lt;a href='http://www.amazon.co.uk/gp/product/140053271X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=140053271X&amp;amp;linkCode=as2&amp;amp;tag=danietomli-21'&gt;Nook SimpleTouch&lt;/a&gt; to £29, and I decided to pick one up from Asda (By the time I got round to ordering they were sold out everywhere).&lt;/p&gt;

&lt;h2 id='unboxing_experience'&gt;Unboxing Experience&lt;/h2&gt;

&lt;p&gt;The device began to impress from the moment I opened the box, it&amp;#8217;s well built, comfortable to hold and lightweight, checking all my mental requirements for something to compete with a good old printed book. It&amp;#8217;s packaging is strong, and high quality, as are its included accessories (i.e the USB cable).&lt;/p&gt;

&lt;h2 id='first_impressions'&gt;First Impressions&lt;/h2&gt;

&lt;p&gt;When the device first arrives you have to leave it to charge for an hour or so, but after this you a free to purchase books from the store, or copy in your existing epub collection.&lt;/p&gt;

&lt;p&gt;The setup experience is mostly good, apart from my accidental tendency to accidentally hit the back button that is located on the bottom left of the keyboard (this seems really strange to me), and meant it took about 10 mins to fill in my debit card details.&lt;/p&gt;

&lt;h2 id='battery_life'&gt;Battery Life&lt;/h2&gt;

&lt;p&gt;The Nook&amp;#8217;s battery life is incredible, I&amp;#8217;ve used the device for about an hour and a half a day on average since it arrived, with WiFi left on, and have downloaded about 8 books from its store, and as I look now it has just hit 50% battery - pretty incredible, you just don&amp;#8217;t need to worry about checking it.&lt;/p&gt;

&lt;h2 id='the_screen'&gt;The Screen&lt;/h2&gt;

&lt;p&gt;The screen is much better than e-readers I&amp;#8217;ve seen in the past, only requiring a full screen refresh every 6 page turns, and only featuring an extremely small amount of ghosting (I&amp;#8217;ve only noticed it twice). The contrast is excellent, and makes reading a real joy, even in bright sunlight.&lt;/p&gt;

&lt;h2 id='other_features'&gt;Other features&lt;/h2&gt;

&lt;p&gt;The nook allows you to take notes on parts of books, and even share snippets to Twitter or Facebook, as well as defining words you may not understand, this, in my opinion is an extremely useful feature if reading very old books to clarify that you are correct with the meaning of words.&lt;/p&gt;

&lt;h2 id='drawbacks'&gt;Drawbacks&lt;/h2&gt;

&lt;p&gt;There is a bug with the OS that if you are reading a book copied from a computer, and you plug the device back into a computer, it may loose the page you were on in the book and although annoying, is not necessarily a deal breaker as a fix should be rolled out in the future.&lt;/p&gt;

&lt;h2 id='store_content'&gt;Store Content&lt;/h2&gt;

&lt;p&gt;Its store has tonnes of excellent books at extremely good prices, I have picked up books at as low as £1.79, which has made me read much more. (If I get into a book, I&amp;#8217;ll read it in a single sitting, which at the price of print media gets very expensive quite quickly, and put me off reading much for a while).&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion, it&amp;#8217;s an excellent device for reading and is specialised for doing so, with really no other features - just how it should be. Although it has a few drawbacks, it&amp;#8217;s an impeccable device for the price, and it is well recommended to anyone who may be considering an e-reader who isn&amp;#8217;t tied into any particular ecosystem.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/articles/ios/thoughts/design/ux/2013/06/13/ios7</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/articles/ios/thoughts/design/ux/2013/06/13/ios7.html"/>
    <title>iOS7</title>
    <published>2013-06-13T12:00:00+01:00</published>
    <updated>2013-06-13T12:00:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;p&gt;As most of you will know, Apple re-released its new child into the world - iOS 7, a re-imagined iOS with a brand new design, interactions and API&amp;#8217;s. Sadly many of us, turned to Twitter/FaceBook/Blogs/[Insert other social media here] to criticise and insult the aesthetics. Without using the OS, or even seeing more than a few glimpses in front of the unveiling. And I admit, even I did the same, and was extremely close to selling my iPhone on eBay, getting an Android and doing Java for a while.&lt;/p&gt;

&lt;p&gt;However, I took a step back, looked again and thought &amp;#8220;there might just be something to this&amp;#8221;, so I downloaded the beta at the first possible chance, and have fallen in love with my iPhone all over again. Ok, some of the home screen icons are quite garish with their 80&amp;#8217;s neon colours, but even Apple has said that it isn&amp;#8217;t yet &lt;a href='http://www.cultofmac.com/231674/apples-designers-werent-in-charge-of-ios-7-icons-overall-design-still-a-work-in-progress/' title='Cult Of Mac - Apple Not finished with Design'&gt;finished with the design&lt;/a&gt; - in fact, it was done by their Print and Web marketing designers. This is what Apple do, they think different, come up with something new, and then refine it, again and again.&lt;/p&gt;

&lt;p&gt;Yesterday, &lt;a href='http://twitter.com/mattgemmell' title='Matt Gemmell&amp;apos;s Twitter'&gt;Matt Gemmell&lt;/a&gt; posted an excellent article to his &lt;a href='http://mattgemmell.com/2013/06/12/ios-7/'&gt;blog&lt;/a&gt; going more in depth about the changes, and does an excellent job of it, so I won&amp;#8217;t delve deeply here.&lt;/p&gt;

&lt;h2 id='the_iconography'&gt;The Iconography&lt;/h2&gt;

&lt;p&gt;The most complained about factor in iOS 7&amp;#8217;s redesign, is the iconography on its home screen, and yes, some of the icons are quite garish (Safari, Game Centre and NewsStand are what stand out to me. As well as the shade of green used in messages, phone and FaceTime), however, on the whole it is a nice refresh, dropping the designs that came around at a time when pixels were the size of your face^1 and bold gradients, shadows and gloss were required to abstract this fact.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Before and After of iOS 6/7 icon images' src='/images/posts/i7vi6icons.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;The thing is, that heavy gradients, gloss&amp;#8217; and shadows aren&amp;#8217;t &lt;em&gt;needed&lt;/em&gt; anymore, with the retina display. We also don&amp;#8217;t need to be handheld any more, when iPhone OS 1.0 first came out, we were like small children - uneducated, stupid even, unknowing of the future that awaited us. That is over. Apple realises this. Apple is changing this. We need to be aware of and accept this.&lt;/p&gt;

&lt;h2 id='design_is_how_it_works'&gt;Design is how it works&lt;/h2&gt;

&lt;p&gt;A rather famous phrase &amp;#8220;Design Is How it Works&amp;#8221;, applies extremely well to iOS 7, it has beautiful new interactions and animations, and although these are still a little buggy, its a &lt;strong&gt;developer&lt;/strong&gt; &lt;strong&gt;beta&lt;/strong&gt;, it isn&amp;#8217;t ready for none developers yet, you shouldn&amp;#8217;t even try. But aside from the odd bugs, things like the new notification centre day view, control centre, and the API&amp;#8217;s, iOS7 empowers developers to do so much more. Wait, and be ready, just please, wait until its ready before you criticise and berate.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to hear your thoughts on this, so feel free to drop me a tweet &lt;a href='http://twitter.com/dantoml'&gt;@DanToml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1: Pixels were not really the size of your face.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/articles/ux/ui/design/2013/05/08/aberration-of-standard-design</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/articles/ux/ui/design/2013/05/08/aberration-of-standard-design.html"/>
    <title>Aberration of standard design</title>
    <published>2013-05-08T20:57:00+01:00</published>
    <updated>2013-05-08T20:57:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">&lt;p&gt;As an avid user of technology and developer, I often beta test and purchase a lot of new applications, however more recently, I have noticed an ever increasing trend of applications that stray from the common methods of interaction and design, although creative, this is often terrible for the average end-user.&lt;/p&gt;
&lt;hr style='width:150px; margin: 0 auto;' /&gt;&lt;br /&gt;
&lt;p&gt;I really do like to see new ways of interacting with technology, in fact, I’ve tried some things myself, however, the average user often learns the common conventions of OS, such as swiping to the left on tableviews to delete items, but when this isn’t the case, on applications such as EvoMail (where to delete from the e-mail list, you must first tap an icon on the toolbar, unlike the convention of a navigation bar), it leaves the user feeling out of control and powerless. As Aral Balkan said:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“Good Design should Empower, Amuse and Delight”&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a great phrase for many reasons, and can be viewed in a few different ways, but personally, I see it as a wake up call, telling designers and developers that it is their responsibilty to make the end user feel powerful and in control of the product. More people need to do that in order to remove the stigma involved with the use of computers, to stop people from being scared of using them, help them to understand whats going on, without being complicated, for example, if an error occurs with an API you use, rather than your app crashing or returning a status code, or a patronising message, present something informative and with simple steps to try and fix it.&lt;/p&gt;

&lt;p&gt;“It appears the -insert service name- is unavailable,please ensure you have a strong internet connection” In closing, we need to make things consistent for the end user, follow standard patterns and interactions, make your app feel natural to the end-user. Make it usable for your great-grandma.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://danie.lt/updates/anouncements/2013/05/08/hello</id>
    <link type="text/html" rel="alternate" href="http://danie.lt/updates/anouncements/2013/05/08/hello.html"/>
    <title>Hello, World.</title>
    <published>2013-05-08T20:37:00+01:00</published>
    <updated>2013-05-08T20:37:00+01:00</updated>
    <author>
      <name>Daniel Tomlinson</name>
      <uri>http://danie.lt/</uri>
    </author>
    <content type="html">Hey there!   

I'd love to welcome you to my new blog, where I will be posting a mix of long and short form articles, tutorials and other bits and bobs.  
   
I hope you find them interesting!   
~Daniel.</content>
  </entry>
  
 
</feed>